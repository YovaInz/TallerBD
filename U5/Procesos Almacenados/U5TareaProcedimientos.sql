--* UTILIZANDO LA BD NORTHWIND, CONTESTAR LOS SIGUIENTES PROCEDIMIENTOS ALMACENADOS:
USE NORTHWIND
--* 1.- PROCEDIMIENTO ALMACENADO QUE RECIBA LA CLAVE DE UN EMPLEADO, REGRESE EN SOLO PARAMETRO DE SALIDA LOS NOMBRES DE LOS CLIENTES QUE HA ATENDIDO. 
--* NOTA: QUE NO SE REPITAN LOS NOMBRES DE LOS CLIENTES.
GO
CREATE PROCEDURE SP_CLIENTES_ATENDIDOS 
@EMP INT, @CLIENTES NVARCHAR(500) OUTPUT AS
SET @CLIENTES = ''

SELECT @CLIENTES = @CLIENTES + T.ContactName + ', '
FROM (
    SELECT DISTINCT C.ContactName
    FROM Orders O
    INNER JOIN Customers C ON O.CustomerID = C.CustomerID
    WHERE O.EmployeeID = @EMP ) AS T

IF LEN(@CLIENTES) > 0
    SET @CLIENTES = LEFT(@CLIENTES, LEN(@CLIENTES) - 2)
GO

-- Ejecucion
DECLARE @Ctes NVARCHAR(500)
EXEC SP_CLIENTES_ATENDIDOS 1, @Ctes OUTPUT
SELECT 'CLIENTES ATENDIDOS' = @Ctes
go
--* 2.- PROCEDIMIENTO ALMACENADO QUE REGRESE LA SIGUIENTE TABLA: NOMBRE DE EMPLEADO Y NOMBRE DE LOS CLIENTES QUE HA ATENDIDO.
--* NOMBRE DEL EMPLEADO	| Nombre de los CLIENTES ATENDIDOS
--* --------------------|---------------------------------
--* PEDRO CASTRO	    |   JOSE, PEDRO, CARLOS
--* ANA LARA	        |   ANA, CARLOS
CREATE PROC SP_EMPLEADO_CLIENTES AS

DECLARE @min INT, @Ctes NVARCHAR(500)

CREATE TABLE #T(EMPID INT, CLIENTES NVARCHAR(500))
SELECT @min = MIN(EmployeeID) from employees
WHILE @min IS NOT NULL
BEGIN
    EXEC SP_CLIENTES_ATENDIDOS @min, @Ctes OUTPUT
    INSERT #T values (@min, @Ctes)
    SELECT @min = MIN(EmployeeID) from Employees 
    WHERE EmployeeID > @min
END

SELECT 'EMPLEADO' = e.FirstName + ' ' + e.LastName, t.CLIENTES
FROM #T t
INNER JOIN Employees e ON e.EmployeeID = t.EMPID
DROP TABLE #T
GO

-- Ejecucion
EXEC SP_EMPLEADO_CLIENTES
GO

--* 3.- CREAR UN SP QUE RECIBA UN AÑO Y LLENE LA SIGUIENTE TABLA LLAMADA SEMANA (CLAVE INT, FECHA DATETIME, SEMANA INT), 
--*     SE DEBE LLENAR DESDE EL PRIMERO DE ENERO HASTA EL 31 DE DICIEMBRE. 
CREATE OR ALTER PROC SP_SEMANAS_ANIO @ANIO DATE AS
DECLARE @FECHAINI DATE = @ANIO, @FECHAFIN DATE, @CLAVE INT = 1
SELECT @ANIO = DATEADD(YY,1, @ANIO)
SELECT @ANIO = DATEADD(DD,-1,@ANIO)
SELECT @FECHAFIN = @ANIO

CREATE TABLE #SEMANA (CLAVE INT, FECHA DATETIME, SEMANA INT)
WHILE @FECHAINI <= @FECHAFIN
BEGIN
    INSERT #SEMANA VALUES (@CLAVE, @FECHAINI, DATEPART(WEEK, @FECHAINI))
    SELECT @CLAVE += 1
    SELECT @FECHAINI = DATEADD(DD, 1, @FECHAINI)
END
SELECT * FROM #SEMANA
DROP TABLE #SEMANA
GO

-- Ejecucion
EXEC SP_SEMANAS_ANIO '2024'
GO

--* 4.- CREAR UN SP QUE REGRESE UNA TABLA CON DOS COLUMNAS: EL NOMBRE DEL EMPLEADO (JEFE) Y EN OTRA COLUMNA EL NOMBRE DE TODOS LOS EMPLEADOS A SU CARGO. 
CREATE PROC SP_JEFE_EMPLEADOS AS
DECLARE @JEFE INT, @EMPS NVARCHAR(500)

CREATE TABLE #T (JEFE INT, EMPLEADOS NVARCHAR(500))
SELECT @JEFE = MIN(ReportsTo) FROM EMPLOYEES

WHILE @JEFE IS NOT NULL
BEGIN
    SET @EMPS = ''
    SELECT @EMPS = @EMPS + FirstName + ' ' + LastName + ', '
    FROM Employees WHERE ReportsTo = @JEFE
    IF LEN(@EMPS) > 0
        SET @EMPS = LEFT(@EMPS, LEN(@EMPS)-2)
    INSERT #T VALUES (@JEFE, @EMPS)
    SELECT @JEFE = MIN(ReportsTo) FROM Employees WHERE ReportsTo > @JEFE
END
SELECT JEFE = j.FirstName + ' ' + j.LastName, t.EMPLEADOS
FROM #T t
INNER JOIN Employees j ON j.EmployeeID = t.JEFE
DROP TABLE #T
GO
-- Ejecucion
EXEC SP_JEFE_EMPLEADOS
GO
--* 5.- AGREGAR A LA TABLA CATEGORIES EL CAMPO TOTALPIEZAS, EL CUAL REPRESENTARÁ EL TOTAL DE PIEZAS VENDIDAS DE CADA CATEGORIA. 
--*     CREAR UN PROCEDIMIENTO ALMACENADO QUE LLENE DICHO CAMPO.
ALTER TABLE Categories ADD TotalPiezas INT
go
CREATE PROC SP_TOTALPIEZAS AS
DECLARE @tp INT = 0, @catid INT
SELECT @catid = min(Categoryid) from Categories

WHILE @catid IS NOT NULL
BEGIN
    SELECT @tp = sum(od.Quantity)
    FROM [Order Details] od
    INNER JOIN Products p on od.ProductID = p.ProductID
    INNER JOIN Categories c on p.CategoryID = c.CategoryID 
    WHERE c.CategoryID = @catid

    UPDATE Categories SET TotalPiezas = @tp WHERE CategoryID = @catid

    SELECT @catid = min(Categoryid) from Categories
    WHERE CategoryID > @catid
END
go

-- Ejecucion
EXEC SP_TOTALPIEZAS
select * from Categories
GO

--* 6.- PROCEDIMIENTO ALMACENADO QUE RECIBA COMO PARAMETRO UN AÑO Y REGRESE DOS PARAMETROS: 
--* •	UN PARAMETRO CON EL NOMBRE DE TODOS LOS CLIENTES QUE COMPRARON ESE AÑO
--* •	Y OTRO PARAMETRO CON LA LISTA DE LAS ORDENES REALIZADAS ESE AÑO.
CREATE OR ALTER PROC SP_ORDENES_ANIO @anio INT, @ctes NVARCHAR(MAX) = '' OUTPUT, @ords NVARCHAR(MAX) = '' OUTPUT AS
SET @ctes = ''
SET @ords = ''
SELECT @ctes = @ctes + T.ContactName + ', ' FROM (
    SELECT DISTINCT c.ContactName 
    FROM Orders o
    INNER JOIN Customers c ON c.CustomerID = o.CustomerID
    WHERE YEAR(o.OrderDate) = @anio) AS T
SELECT @ctes = LEFT(@ctes, LEN(@ctes) - 2)

SELECT @ords = @ords + CONVERT(VARCHAR(5), orderid) + ', '
FROM Orders 
WHERE YEAR(OrderDate) = @anio
SELECT @ords = LEFT(@ords, LEN(@ords) - 2)
GO
-- Ejecucion
DECLARE @A NVARCHAR(MAX), @B NVARCHAR(MAX)
EXEC SP_ORDENES_ANIO '1996', @A OUTPUT, @B OUTPUT
SELECT CLIENTES = @A, ORDENES = @B
GO

--* 7.- PROCEDIMIENTO ALMACENADO QUE REGRESE UNA TABLA CON EL AÑO Y LOS NOMBRES DE LOS CLIENTES QUE SE COMPRARON ESE AÑO. 
--*     NO SE DEBEN REPETIR LOS NOMBRES.
--* AÑO	Nombre de los CLIENTES
--* 2021	JOSE, PEDRO, CARLOS
--* 2022	ANA, CARLOS
CREATE OR ALTER PROC SP_CLIENTES_ANIO AS
DECLARE @anio INT, @clientes NVARCHAR(MAX)

CREATE TABLE #T (ANIO INT, CLIENTES NVARCHAR(MAX))

SELECT @anio = min(T.anio) FROM (
    SELECT anio = YEAR(OrderDate)
    FROM Orders
    GROUP BY YEAR(OrderDate) ) AS T

WHILE @anio IS NOT NULL
BEGIN
    EXEC SP_ORDENES_ANIO @anio, @clientes OUTPUT

    INSERT #T VALUES (@anio, @clientes)

    SELECT @anio = min(T.anio) 
    FROM (
        SELECT anio = YEAR(OrderDate)
        FROM Orders
        GROUP BY YEAR(OrderDate)
    ) AS T
    WHERE T.anio > @anio
END
SELECT * FROM #T
GO

-- Ejecucion
EXEC SP_CLIENTES_ANIO
GO

--* 8.- SP QUE RECIBA UN AÑO COMO PARAMETRO DE ENTRADA, QUE REGRESE UNA TABLA CON DOS COLUMNAS: MES, FOLIOS QUE SE VENDIERON ESE MES. NOTA: MOSTRAR TODOS LOS MESES.

--* NOMBRE DEL MES	FOLIOS
--* ENERO	1 ,2,3,4,5
--* FEBRERO	6,7,8,9
--* …..	
--* DICIEMBRE	100,101,102


--* 9.- SP QUE RECIBA LA CLAVE DEL EMPLEADO Y REGRESE COMO PARAMETRO DE SALIDA TODOS LOS NOMBRES DE LOS TERRITORIOS QUE ATIENDEN EL EMPLEADO.

--* 10.- DEL A SIGUIENTE TABLA ESTUDIANTES, REALIZAR UN PROCESO QUE ELIMINE LOS REGISTROS DUPLICADOS.

CREATE TABLE ESTUDIANTES
    ( 
    [ID] INT identity(1,1), 
    [FirstName] Varchar(100), 
    [LastName] Varchar(100), 
    [Country] Varchar(100), 
    ) 
GO 
    
Insert into ESTUDIANTES ([FirstName],[LastName],[Country] )values
    ('Raj','Gupta','India'),
    ('Raj','Gupta','India'),
    ('Mohan','Kumar','USA'),
    ('Raj','Gupta','India'),
    ('James','Barry','UK'),
    ('James','Barry','UK'),
    ('James','Barry','UK'),
    ('James','Barry','UK'),
    ('Mohan','Kumar','USA'),
    ('Ana','Lopez','USA'),
    ('Ana','Lopez','USA')
